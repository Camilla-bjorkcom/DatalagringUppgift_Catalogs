// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shared_Catalogs.Contexts;

#nullable disable

namespace Shared_Catalogs.Migrations
{
    [DbContext(typeof(CustomerDbContext))]
    [Migration("20240201180706_Add_CustomersCatalog")]
    partial class Add_CustomersCatalog
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Shared_Catalogs.Entities.Customers.AddressesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("char(6)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Shared_Catalogs.Entities.Customers.ContactInformationEntity", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("ContactInformation");
                });

            modelBuilder.Entity("Shared_Catalogs.Entities.Customers.CustomerPhoneNumbersEntity", b =>
                {
                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ContactInformationCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ContactId", "PhoneNumber");

                    b.HasIndex("ContactInformationCustomerId");

                    b.ToTable("CustomerPhoneNumbers");
                });

            modelBuilder.Entity("Shared_Catalogs.Entities.Customers.CustomerProfilesEntity", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProfileImg")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("CustomerProfiles");
                });

            modelBuilder.Entity("Shared_Catalogs.Entities.Customers.CustomerTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerType")
                        .IsUnique();

                    b.ToTable("CustomerType");
                });

            modelBuilder.Entity("Shared_Catalogs.Entities.Customers.CustomersEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("AddressesId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressesId");

                    b.HasIndex("CustomerTypeId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Shared_Catalogs.Entities.Customers.ContactInformationEntity", b =>
                {
                    b.HasOne("Shared_Catalogs.Entities.Customers.CustomersEntity", "Customer")
                        .WithOne("ContactInformation")
                        .HasForeignKey("Shared_Catalogs.Entities.Customers.ContactInformationEntity", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Shared_Catalogs.Entities.Customers.CustomerPhoneNumbersEntity", b =>
                {
                    b.HasOne("Shared_Catalogs.Entities.Customers.ContactInformationEntity", "ContactInformation")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("ContactInformationCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactInformation");
                });

            modelBuilder.Entity("Shared_Catalogs.Entities.Customers.CustomerProfilesEntity", b =>
                {
                    b.HasOne("Shared_Catalogs.Entities.Customers.CustomersEntity", "Customer")
                        .WithOne("CustomerProfiles")
                        .HasForeignKey("Shared_Catalogs.Entities.Customers.CustomerProfilesEntity", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Shared_Catalogs.Entities.Customers.CustomersEntity", b =>
                {
                    b.HasOne("Shared_Catalogs.Entities.Customers.AddressesEntity", "Addresses")
                        .WithMany("Customers")
                        .HasForeignKey("AddressesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared_Catalogs.Entities.Customers.CustomerTypeEntity", "CustomerType")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Addresses");

                    b.Navigation("CustomerType");
                });

            modelBuilder.Entity("Shared_Catalogs.Entities.Customers.AddressesEntity", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Shared_Catalogs.Entities.Customers.ContactInformationEntity", b =>
                {
                    b.Navigation("PhoneNumbers");
                });

            modelBuilder.Entity("Shared_Catalogs.Entities.Customers.CustomerTypeEntity", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Shared_Catalogs.Entities.Customers.CustomersEntity", b =>
                {
                    b.Navigation("ContactInformation")
                        .IsRequired();

                    b.Navigation("CustomerProfiles")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
